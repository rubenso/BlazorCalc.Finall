@page "/calculator"
@page "/"
@using BlazorCalc.Shared
@inject HttpClient _http

<h1>Kalkulačka</h1>
<div class="calc-layout">
    <div class="calculator">
        <!-- the input -->
        <div class="row">
            <Display Value="@DisplayExp.Value"></Display>
        </div>
        <div class="row">
            <Setting DisplayExpSetting="@DisplayExp"></Setting>
        </div>
        <!-- the buttons -->
        <div class="row">
            <NumericKeys Disabled="@DisableNumericKeys" OnClick="@ClickNumberHandler"></NumericKeys>
            <Operations Disabled="@DisableOperations" OnClick="@ClickOperationHandler"></Operations>
        </div>
        <div class="row">
            <Execution Disabled="@DisableExecution" Calculate="@ClickExecutionHandler"></Execution>
        </div>
    </div>
    <div class="history">
        <div class="row">
            <History HistoryList="@History"></History>
        </div>
    </div>
</div>

@code {


    protected Expression DisplayExp = new Expression();
    protected string[] History;
    protected bool DisableOperations;
    protected bool DisableNumericKeys;
    protected bool DisableExecution;
    protected bool CommaInserted;

    private readonly string defaultScreen = "0";

    void ClickNumberHandler(string pressedSymbol)
    {
        switch (pressedSymbol)
        {
            case "+-":
            {
                if (DisplayExp.Value.StartsWith('-'))
                {
                    DisplayExp.Value = DisplayExp.Value.Remove(0, 1);
                }
                else
                {
                    if (DisplayExp.Value != defaultScreen)
                        DisplayExp.Value = $"-{DisplayExp.Value}";
                }
                DisableExecution = false;
                break;
            }
            case ",":
            case ".":
            {
                if (CommaInserted) return;
                DisplayExp.Value += pressedSymbol;
                CommaInserted = true;
                break;
            }
            default:
            {
                if (DisplayExp.Value == defaultScreen)
                {
                    DisplayExp.Value = pressedSymbol;
                }
                else
                {
                    DisplayExp.Value += pressedSymbol;
                }
                DisableExecution = false;
                break;
            }
        }
    }

    void ClickOperationHandler(string pressedOperation)
    {
        switch (pressedOperation)
        {
            case "Clear":
                ResetCalculator();
                break;
            default:
                DisplayExp.Value += pressedOperation;
                DisableOperations = true;
                DisableExecution = true;
                CommaInserted = false;
                break;
        }
    }


    public async Task ClickExecutionHandler()
    {
        DisableExecution = true;
        var response = await _http.PostAsJsonAsync("Execution", DisplayExp);
        if (response.IsSuccessStatusCode)
        {
            var result = await response.Content.ReadFromJsonAsync<string>();
            ResetCalculator();
            DisplayExp.Value = result;
            DisableExecution = false;
        }
        else
        {
            DisableCalculator();
            DisplayExp.Value = "Err";
        }

        await RefreshHistory();
    }

    public async Task RefreshHistory()
    {
        History = await _http.GetFromJsonAsync<string[]>("Execution");
    }

    protected override async Task OnInitializedAsync()
    {
        await RefreshHistory();
        ResetCalculator();
    }

    private void ResetCalculator()
    {
        DisableOperations = false;
        DisableNumericKeys = false;
        CommaInserted = false;
        DisableExecution = false;
        DisplayExp.Value = defaultScreen;
    }

    private void DisableCalculator()
    {
        DisableOperations = true;
        DisableNumericKeys = true;
        DisableExecution = true;
        DisplayExp.Value = defaultScreen;
    }

}